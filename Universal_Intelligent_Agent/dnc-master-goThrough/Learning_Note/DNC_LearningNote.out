\BOOKMARK [1][-]{section.1}{Ultimate Topics to Study}{}% 1
\BOOKMARK [2][-]{subsection.1.1}{What type of task does this agent try to finish}{section.1}% 2
\BOOKMARK [2][-]{subsection.1.2}{What is the function of memory in this task}{section.1}% 3
\BOOKMARK [2][-]{subsection.1.3}{What tyep of tasks can we train the agent to do}{section.1}% 4
\BOOKMARK [2][-]{subsection.1.4}{What parts and functions can we add to this agent}{section.1}% 5
\BOOKMARK [1][-]{section.2}{Learning Note 20180506}{}% 6
\BOOKMARK [2][-]{subsection.2.1}{The Read Process}{section.2}% 7
\BOOKMARK [2][-]{subsection.2.2}{Addressing Mechanism}{section.2}% 8
\BOOKMARK [1][-]{section.3}{Learning Note 20180505}{}% 9
\BOOKMARK [2][-]{subsection.3.1}{Agent Task Analysis}{section.3}% 10
\BOOKMARK [3][-]{subsubsection.3.1.1}{What is the agent trying to learn?}{subsection.3.1}% 11
\BOOKMARK [3][-]{subsubsection.3.1.2}{Is there any law used to generate this pattern?}{subsection.3.1}% 12
\BOOKMARK [2][-]{subsection.3.2}{Experiments}{section.3}% 13
\BOOKMARK [3][-]{subsubsection.3.2.1}{Try to pring the sequence of each time step of a single sample in the batch}{subsection.3.2}% 14
\BOOKMARK [1][-]{section.4}{Code Structure}{}% 15
\BOOKMARK [2][-]{subsection.4.1}{About Computation Graph}{section.4}% 16
\BOOKMARK [1][-]{section.5}{Code Features}{}% 17
\BOOKMARK [2][-]{subsection.5.1}{The Structure of Return Value of DNC Core}{section.5}% 18
\BOOKMARK [2][-]{subsection.5.2}{The Illustration of DNC \(Unrolled by Time\)}{section.5}% 19
\BOOKMARK [1][-]{section.6}{Question}{}% 20
\BOOKMARK [2][-]{subsection.6.1}{The memory and controller are defined, but are not connected}{section.6}% 21
\BOOKMARK [2][-]{subsection.6.2}{The build function is not used}{section.6}% 22
\BOOKMARK [2][-]{subsection.6.3}{The functionality of dynamic rnn}{section.6}% 23
\BOOKMARK [2][-]{subsection.6.4}{In every loop a new DNC is created?}{section.6}% 24
\BOOKMARK [2][-]{subsection.6.5}{How the computation graph is built in tensorflow?}{section.6}% 25
\BOOKMARK [2][-]{subsection.6.6}{What does build do in the code}{section.6}% 26
\BOOKMARK [2][-]{subsection.6.7}{Draw UML for the code}{section.6}% 27
\BOOKMARK [2][-]{subsection.6.8}{Why there is a init function and a build function in each class}{section.6}% 28
\BOOKMARK [2][-]{subsection.6.9}{The sequence of calling of build function}{section.6}% 29
\BOOKMARK [2][-]{subsection.6.10}{Draw the inheritance relation ship \(and attributes\) starting from AbstractModule}{section.6}% 30
\BOOKMARK [2][-]{subsection.6.11}{Figure out how abstract class works in python \(e.g. why no init function\)}{section.6}% 31
\BOOKMARK [2][-]{subsection.6.12}{Another implementation of DNC}{section.6}% 32
\BOOKMARK [2][-]{subsection.6.13}{Is the input presented to DNC at each time step?}{section.6}% 33
\BOOKMARK [2][-]{subsection.6.14}{What is the timestep of DNC}{section.6}% 34
\BOOKMARK [2][-]{subsection.6.15}{What is the size of each memory block in DNC memory?}{section.6}% 35
\BOOKMARK [1][-]{section.7}{Questions about DNC}{}% 36
\BOOKMARK [2][-]{subsection.7.1}{Equivalence between Neural network, Turing machine and brain?}{section.7}% 37
